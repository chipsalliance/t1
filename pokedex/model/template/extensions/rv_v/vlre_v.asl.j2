{% set inst_dot = inst | replace('_', '.') %}
// auto-generated from template vlre_v.asl.j2
// PARAMS:
//   inst = {{ inst }}
//   emul = {{ emul }}
//   eew = {{ eew }}
//
// vl{{emul}}re{{eew}}.v vd, (rs1)
// load whole vector with EMUL={{emul}}, EEW={{eew}}
//
// NOTE: this instruction supports non-zero vstart
// NOTE: this instruction allows invalid vtype

let vd: VREG_TYPE = UInt(GetRD(instruction));
let rs1: XREG_TYPE = UInt(GetRS1(instruction));

if vd MOD {{emul}} != 0 then
  return Exception(CAUSE_ILLEGAL_INSTRUCTION, Zeros(32));
end

let evl = {{emul}} * (VLEN DIV {{eew}});
let vstart = UInt(VSTART);

if vstart > evl then
  return Exception(CAUSE_ILLEGAL_INSTRUCTION, Zeros(32));
end

let src1 = X[rs1];

for idx = vstart to evl - 1 do
  let addr = src1 + ({{eew}} DIV 8) * idx;
  let (data, result) = ReadMemory(addr, {{eew}});

  if !result.is_ok then
    VSTART = idx[LOG2_VLEN-1:0];
    return result;
  end

  VRF_{{eew}}[vd, idx] = data;
end

ClearVSTART();

PC = PC + 4;

return Retired();
