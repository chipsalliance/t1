{% set inst_dot = inst | replace('_', '.') %}
// auto-generated from template vmop_mm.asl.j2
// PARAMS:
//   inst = {{ inst }}
//   op_func = {{ op_func }}

// {{ inst_dot }} vd, vs2, vs1
// eew(vd, vs2, vs1) = 1, they are all masks
// {{ function_description }}

let vd : VREG_TYPE = UInt(GetRD(instruction));
let vs2 : VREG_TYPE = UInt(GetRS2(instruction));
let vs1 : VREG_TYPE = UInt(GetRS1(instruction));

if VTYPE.ill then
  return Exception(CAUSE_ILLEGAL_INSTRUCTION, Zeros(32));
end

let vl = VL;

// uarch
if UInt(VSTART) != 0 then
  return Exception(CAUSE_ILLEGAL_INSTRUCTION, Zeros(32));
end

// always undisturbed
// TOOD: support agnostic to reduce VRF read
for idx = 0 to vl - 1 do
    let src2 : bit = VRF_MASK[vs2, idx];
    let src1 : bit = VRF_MASK[vs1, idx];

    let res : bit = {{ op_func }}(src2, src1);

    VRF_MASK[vd, idx] = res;
end

ClearVSTART();

PC = PC + 4;

return Retired();
