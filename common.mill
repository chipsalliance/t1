// SPDX-License-Identifier: Apache-2.0
// SPDX-FileCopyrightText: 2022 Jiuyang Liu <liu@jiuyang.me>

package build

import mill._
import mill.scalalib._
import os.Path

trait HasChisel extends ScalaModule {
  // Define these for building chisel from source
  def chiselModule: Option[ScalaModule]

  override def moduleDeps = super.moduleDeps ++ chiselModule

  def chiselPluginJar: T[Option[PathRef]]

  override def scalacOptions = T(
    super.scalacOptions() ++ chiselPluginJar().map(path => s"-Xplugin:${path.path}") ++ Seq("-Ymacro-annotations")
  )

  override def scalacPluginClasspath: T[Agg[PathRef]] = T(super.scalacPluginClasspath() ++ chiselPluginJar())

  // Define these for building chisel from ivy
  def chiselIvy: Option[Dep]

  override def ivyDeps = T(super.ivyDeps() ++ chiselIvy)

  def chiselPluginIvy: Option[Dep]

  override def scalacPluginIvyDeps: T[Agg[Dep]] = T(
    super.scalacPluginIvyDeps() ++ chiselPluginIvy.map(Agg(_)).getOrElse(Agg.empty[Dep])
  )
}

trait HasRVDecoderDB extends ScalaModule {
  def rvdecoderdbIvy:   Dep
  def riscvOpcodesPath: T[PathRef]
  def ivyDeps = T(super.ivyDeps() ++ Seq(rvdecoderdbIvy))
  def riscvOpcodesTar:    T[PathRef]      = T {
    val tmpDir = os.temp.dir()
    os.makeDir(tmpDir / "unratified")
    os.walk(riscvOpcodesPath().path)
      .filter(f =>
        f.baseName.startsWith("rv128_") ||
          f.baseName.startsWith("rv64_") ||
          f.baseName.startsWith("rv32_") ||
          f.baseName.startsWith("rv_") ||
          f.ext == "csv"
      )
      .groupBy(_.segments.contains("unratified"))
      .map {
        case (true, fs)  => fs.map(os.copy.into(_, tmpDir / "unratified"))
        case (false, fs) => fs.map(os.copy.into(_, tmpDir))
      }
    os.proc("tar", "cf", T.dest / "riscv-opcodes.tar", ".").call(tmpDir)
    PathRef(T.dest)
  }
  override def resources: T[Seq[PathRef]] = super.resources() ++ Some(riscvOpcodesTar())
}

// Local definitions
trait T1Module extends ScalaModule with HasChisel with HasRVDecoderDB {
  def arithmeticIvy: Dep
  def hardfloatIvy:  Dep
  def axi4Ivy:       Dep
  def stdlibModule:  ScalaModule
  def moduleDeps       = super.moduleDeps ++ Seq(stdlibModule)
  override def ivyDeps = T(super.ivyDeps() ++ Seq(arithmeticIvy, hardfloatIvy, axi4Ivy))
}

trait ConfigGenModule extends ScalaModule {
  def t1Module: ScalaModule
  def moduleDeps = super.moduleDeps ++ Seq(t1Module)
  def mainargsIvy: Dep
  override def ivyDeps = T(super.ivyDeps() ++ Seq(mainargsIvy))
}

// T1 forked version of RocketCore
trait RocketModule extends ScalaModule with HasChisel with HasRVDecoderDB {
  def rocketchipModule: ScalaModule
  def moduleDeps = super.moduleDeps ++ Seq(rocketchipModule)
}

// The next generation of purely standalone Rocket Core w/ AXI/CHI.
trait RocketVModule extends ScalaModule with HasChisel with HasRVDecoderDB {
  def axi4Ivy:      Dep
  def hardfloatIvy: Dep
  def stdlibModule: ScalaModule

  def moduleDeps       = super.moduleDeps ++ Seq(stdlibModule)
  override def ivyDeps = T(super.ivyDeps() ++ Seq(hardfloatIvy, axi4Ivy))
}

// Link T1 example: RocketV+T1
trait T1RocketModule extends ScalaModule with HasChisel {
  def rocketModule: ScalaModule
  def t1Module:     ScalaModule

  def moduleDeps = super.moduleDeps ++ Seq(rocketModule, t1Module)
}

trait EmuHelperModule extends ScalaModule with HasChisel

trait T1EmulatorModule extends ScalaModule with HasChisel {
  def t1Module: ScalaModule
  def moduleDeps = super.moduleDeps ++ Seq(t1Module)
}

trait T1RocketEmulatorModule extends ScalaModule with HasChisel {
  def t1rocketModule: ScalaModule
  def moduleDeps = super.moduleDeps ++ Seq(t1rocketModule)
}

trait ElaboratorModule extends ScalaModule with HasChisel {
  def generators:       Seq[ScalaModule]
  def circtInstallPath: T[os.Path]
  def mlirInstallPath:  T[os.Path]
  override def moduleDeps = super.moduleDeps ++ generators
  def mainargsIvy: Dep
  override def ivyDeps      = T(super.ivyDeps() ++ Seq(mainargsIvy))
  override def javacOptions = T(super.javacOptions() ++ Seq("--enable-preview", "--release", "21"))
  def libraryPaths          = Task(Seq(mlirInstallPath() / "lib", circtInstallPath() / "lib").map(PathRef(_)))
  override def forkArgs: T[Seq[String]] = T(
    super.forkArgs() ++ Seq(
      "--enable-native-access=ALL-UNNAMED",
      "--enable-preview"
    )
  )
}

trait OMReaderModule extends ScalaModule {
  def circtInstallPath: T[os.Path]
  def mlirInstallPath:  T[os.Path]

  def omlibIvy:    Dep
  def oslibIvy:    Dep
  def mainargsIvy: Dep

  override def ivyDeps      = T(super.ivyDeps() ++ Seq(mainargsIvy, oslibIvy, omlibIvy))
  override def javacOptions = T(super.javacOptions() ++ Seq("--enable-preview", "--release", "21"))
  def libraryPaths          = Task(Seq(mlirInstallPath() / "lib", circtInstallPath() / "lib").map(PathRef(_)))
  override def forkArgs: T[Seq[String]] = T(
    super.forkArgs() ++ Seq(
      "--enable-native-access=ALL-UNNAMED",
      "--enable-preview"
    )
  )
}

trait IpxactModule extends ScalaModule {
  def scalaxbIvy:                Dep
  def jxabRuntimeIvy:            Dep
  def scalaXmlIvy:               Dep
  def scalaParserCombinatorsIvy: Dep
  def jaxbApiIvy:                Dep
  def scalaxbRT:                 T[Agg[BoundDep]] = T(Agg(scalaxbIvy, jxabRuntimeIvy).map(Lib.depToBoundDep(_, scalaVersion())))

  override def ivyDeps:      T[Agg[Dep]] = T(super.ivyDeps() ++ Agg(jaxbApiIvy, scalaXmlIvy, scalaParserCombinatorsIvy))
  def scalaxbDefaultPackage: T[String]

  // Command line Options as documented on http://scalaxb.org
  def scalaxbOptions: Target[Seq[String]] = T[Seq[String]] { Seq() }

  def xsdPath:  Target[Path] = T { millSourcePath }
  def wsdlPath: Target[Path] = T { millSourcePath }

  def xsdSources:  Target[IndexedSeq[PathRef]] = T { os.walk(xsdPath()).filter(_.ext == "xsd").map(PathRef(_)) }
  def wsdlSources: Target[IndexedSeq[PathRef]] = T { os.walk(wsdlPath()).filter(_.ext == "wsdl").map(PathRef(_)) }

  def scalaxbArguments =
    T[Seq[String]] {
      scalaxbOptions() ++
        Seq[String]("--default-package", scalaxbDefaultPackage()) ++
        (wsdlSources() ++ xsdSources()).map(_.path.toString)
    }

  override def generatedSources =
    super.generatedSources() ++ scalaxbGeneratedSources()

  def scalaxbClasspath: Task[Agg[PathRef]] = resolveDeps(scalaxbRT)

  def scalaxbGeneratedSources =
    T[Seq[PathRef]] {
      val dest = T.ctx().dest
      val args: Seq[String] =
        Seq("--outdir", dest.toString) ++ scalaxbArguments()
      T.ctx().log.info(s"scalaxb ${args.mkString(" ")}")

      mill.util.Jvm.callProcess(
        mainClass = "scalaxb.compiler.Main",
        classPath = scalaxbClasspath().map(_.path).toSeq,
        jvmArgs = forkArgs(),
        env = forkEnv(),
        mainArgs = args,
        cwd = forkWorkingDir()
      )

      Seq(PathRef(dest)).flatMap(p => os.walk(p.path)).map(PathRef(_))
    }
}

trait StdlibModule extends ScalaModule with HasChisel {
  def dwbbIvy: Dep

  override def ivyDeps = T(super.ivyDeps() ++ Seq(dwbbIvy))
}
