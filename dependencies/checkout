#!/usr/bin/env bash

set -e

if [[ -d "dependencies" ]]; then
  echo "Please run this script in 'dependencies' directory" >&2
  exit 1
fi

export PATH="$(nix build '.#jq.bin' --no-warn-dirty --no-link --print-out-paths)/bin:$PATH"
export PATH="$(nix build '.#git' --no-warn-dirty --no-link --print-out-paths)/bin:$PATH"

nvfetcherSourceJson=${NVFETCHER_SOURCE_JSON:-../nix/t1/dependencies/_sources/generated.json}
if [[ ! -f "$nvfetcherSourceJson" ]]; then
  echo "\$NVFETCHER_SOURCE_JSON file $nvfetcherSourceJson not found" >&2
  exit 1
fi

rootDir=${CHECKOUT_ROOT_DIR:-./submodules}
mkdir -p "$rootDir"

vendorInfos=( $(jq -r \
  'to_entries[] | "\(.key),https://github.com/\(.value.src.owner)/\(.value.src.repo).git,\(.value.src.rev)"' \
  "$nvfetcherSourceJson") )

function pathToModule() {
  local path="$1"; shift
  if [[ -z "$path" ]]; then
    echo "No arguments" >&2
    return 1
  fi

  local safePath="$(echo "$path" | sed 's/.//' | sed 's|/| |g' | xargs)"
  IFS=' ' read -ra segments <<< "$safePath"

  _ifs="$IFS"
  IFS='.'
  echo "${segments[*]}"

  IFS="$_ifs"
  unset segments
}

function patchMillRepo() {
  local oldRoot="$1"; shift
  local newRoot="$1"; shift

  echo "Patching repository"
  mv build.mill package.mill
  # Replace `package build`
  sed -i "s/^package ${oldRoot}$/package ${newRoot}/" package.mill
  if [[ -f "common.mill" ]]; then
    sed -i "s/^package ${oldRoot}$/package ${newRoot}/" common.mill
  fi
}

for info in "${vendorInfos[@]}"; do
  echo
  IFS=',' read -r name url rev <<< "$info"
  echo "Handling repo: $name"
  if [[ ! -d "$rootDir/$name"  ]]; then
    git clone "$url" "$rootDir/$name"
  fi

  pushd "$rootDir/$name" >/dev/null
  echo "Cleaning repository"
  git reset --hard
  git clean -fdx

  echo "Checkout to rev $rev"
  git -c advice.detachedHead=false checkout "$rev"

  if [[ -f "build.mill" ]]; then
    patchMillRepo "build" "build.dependencies.$(pathToModule "$rootDir").$name"
  fi

  popd >/dev/null

  echo

  unset name url rev
done

# vim: ft=bash
