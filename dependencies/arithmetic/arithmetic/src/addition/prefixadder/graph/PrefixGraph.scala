package addition.prefixadder.graph

import addition.prefixadder.PrefixAdder
import addition.prefixadder.common.CommonPrefixSum

import scala.util.matching.Regex
import os._

case class PrefixGraph(nodes: Seq[PrefixNode]) {
  override def toString: String =
    "digraph G {\n" + (nodes.map { node =>
      s""""${node.toString}" [pos="${node.level},${node.bit}"];"""
    } ++ nodes.flatMap { node =>
      node.fathers.map { father =>
        s""""${father.toString}" -> "${node.toString}";"""
      }
    }).mkString("\n") + "\n}"

  def width: Int = nodes.map(_.bit).max + 1

  def depth: Int = nodes.map(_.level).max

  def bit(bit: Int): Seq[PrefixNode] = nodes.filter(_.bit == bit)

  def level(level: Int): Seq[PrefixNode] = nodes.filter(_.level == level)

  def lastLevelNode: Seq[PrefixNode] =
    nodes.groupBy(_.bit).map { case (level, node) => node.filter(_.prefixData.contains(0)).max }.toSeq
}

object PrefixGraph {
  def apply(nodes: Set[PrefixNode]): PrefixGraph = new PrefixGraph(nodes.toSeq.sorted)

  def apply(path: ReadablePath): PrefixGraph = {
    val dotGraph: DotGraph = upickle.default.read[DotGraph](os.read(path))
    val pattern:  Regex = "Node([0-9]+)-([0-9]+)-([0-9]+)".r
    var dotMap:   Map[Int, PrefixNode] = Map[Int, PrefixNode]()
    dotGraph.nodes.map { dotNode =>
      val pattern(level, bit, _) = dotNode.name
      (dotNode.index, level.toInt, bit.toInt)
    }
      .sortBy(_._1)
      .foreach {
        case (index: Int, level: Int, bit: Int) =>
          dotMap += (index -> (if (level == 0) PrefixNode(bit)
                               else
                                 PrefixNode(
                                   dotGraph.edges.filter(_.head == index).map(dotEdge => dotMap(dotEdge.tail)): _*
                                 )))
      }
    apply(dotMap.values.toSet)
  }
}

object CommonSumByConsole extends HasPrefixSumWithGraphImp with CommonPrefixSum {
  val filePath = Path(scala.io.StdIn.readLine("Import your graph generated by `dot -Txdot_json`: "), pwd)
  val fileName = filePath.baseName
  val prefixGraph: PrefixGraph = PrefixGraph(filePath)
}

class ConsoleCommonAdderWithGraph extends PrefixAdder(CommonSumByConsole.prefixGraph.width, CommonSumByConsole) {
  override val desiredName = CommonSumByConsole.fileName
}
