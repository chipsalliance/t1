{ lib
, linkerScript
, rvv-codegen
, makeBuilder
}:

let
  builder = makeBuilder { casePrefix = "codegen"; };
  makeCaseName = lib.replaceStrings [ "." ] [ "_" ];

  build = { rawCaseName, fp }:
    builder rec {
      caseName = makeCaseName rawCaseName;

      includeArgs = [
        "-I${./override_include}"
        "-I${rvv-codegen}/include"
      ];

      dontUnpack = true;

      buildPhase = ''
        runHook preBuild

        ${rvv-codegen}/bin/single \
          -VLEN "$vLen" \
          -XLEN "$xLen" \
          -repeat 16 \
          -testfloat3level 2 \
          -configfile ${rvv-codegen}/configs/${rawCaseName}.toml \
          -outputfile $pname.S

        # temporary fix, to be extended later
        if $CC $pname.S -T ${linkerScript} $includeArgs -o $pname.elf ; then
          echo "link with 4M SRAM succeded"
        else
          echo "link with 4M SRAM failed, use DDR instead"
          sed 's/>SRAM/>DDR/' ${linkerScript} > t1-ddr.ld
          $CC $pname.S -T t1-ddr.ld $includeArgs -o $pname.elf
        fi

        runHook postBuild
      '';

      meta.description = "test case '${caseName}' generated by codegen";
    };

  buildTestsFromFile = file: { fp ? false }:
    with lib;
    let
      rawCaseNames = lib.splitString "\n" (lib.fileContents file);
    in
    (listToAttrs
      (map
        (rawCaseName: nameValuePair
          (makeCaseName rawCaseName)
          (build { inherit rawCaseName fp; })
        )
        rawCaseNames));

  commonTests = buildTestsFromFile ./common.txt { };
  fpTests = buildTestsFromFile ./fp.txt { fp = true; };

in
lib.recurseIntoAttrs (commonTests // fpTests)

