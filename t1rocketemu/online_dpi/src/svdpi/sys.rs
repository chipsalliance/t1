// modified from `bindgen --allowlist-item 'sv.*' svdpi.h`
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

/* automatically generated by rust-bindgen 0.69.4 */

pub const sv_0: u32 = 0;
pub const sv_1: u32 = 1;
pub const sv_z: u32 = 2;
pub const sv_x: u32 = 3;
pub const sv_scaled_real_time: u32 = 1;
pub const sv_sim_time: u32 = 2;
pub type svScalar = u8;
pub type svBit = svScalar;
pub type svLogic = svScalar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_vpi_vecval {
    pub aval: u32,
    pub bval: u32,
}
#[test]
fn bindgen_test_layout_t_vpi_vecval() {
    const UNINIT: ::std::mem::MaybeUninit<t_vpi_vecval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<t_vpi_vecval>(),
        8usize,
        concat!("Size of: ", stringify!(t_vpi_vecval))
    );
    assert_eq!(
        ::std::mem::align_of::<t_vpi_vecval>(),
        4usize,
        concat!("Alignment of ", stringify!(t_vpi_vecval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_vecval),
            "::",
            stringify!(aval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bval) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_vecval),
            "::",
            stringify!(bval)
        )
    );
}
pub type s_vpi_vecval = t_vpi_vecval;
pub type svLogicVecVal = s_vpi_vecval;
pub type svBitVecVal = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_vpi_time {
    pub type_: i32,
    pub high: u32,
    pub low: u32,
    pub real: f64,
}
#[test]
fn bindgen_test_layout_t_vpi_time() {
    const UNINIT: ::std::mem::MaybeUninit<t_vpi_time> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<t_vpi_time>(),
        24usize,
        concat!("Size of: ", stringify!(t_vpi_time))
    );
    assert_eq!(
        ::std::mem::align_of::<t_vpi_time>(),
        8usize,
        concat!("Alignment of ", stringify!(t_vpi_time))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_time),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).high) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_time),
            "::",
            stringify!(high)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).low) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_time),
            "::",
            stringify!(low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).real) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_time),
            "::",
            stringify!(real)
        )
    );
}
pub type s_vpi_time = t_vpi_time;
pub type svTimeVal = s_vpi_time;
extern "C" {
    pub fn svDpiVersion() -> *const ::std::os::raw::c_char;
}
pub type svScope = *mut ::std::os::raw::c_void;
pub type svOpenArrayHandle = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn svGetBitselBit(s: *const svBitVecVal, i: ::std::os::raw::c_int) -> svBit;
}
extern "C" {
    pub fn svGetBitselLogic(s: *const svLogicVecVal, i: ::std::os::raw::c_int) -> svLogic;
}
extern "C" {
    pub fn svPutBitselBit(d: *mut svBitVecVal, i: ::std::os::raw::c_int, s: svBit);
}
extern "C" {
    pub fn svPutBitselLogic(d: *mut svLogicVecVal, i: ::std::os::raw::c_int, s: svLogic);
}
extern "C" {
    pub fn svGetPartselBit(
        d: *mut svBitVecVal,
        s: *const svBitVecVal,
        i: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn svGetPartselLogic(
        d: *mut svLogicVecVal,
        s: *const svLogicVecVal,
        i: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn svPutPartselBit(
        d: *mut svBitVecVal,
        s: svBitVecVal,
        i: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn svPutPartselLogic(
        d: *mut svLogicVecVal,
        s: svLogicVecVal,
        i: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn svLeft(h: svOpenArrayHandle, d: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn svRight(h: svOpenArrayHandle, d: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn svLow(h: svOpenArrayHandle, d: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn svHigh(h: svOpenArrayHandle, d: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn svIncrement(h: svOpenArrayHandle, d: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn svSize(h: svOpenArrayHandle, d: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn svDimensions(h: svOpenArrayHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn svGetArrayPtr(arg1: svOpenArrayHandle) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn svSizeOfArray(arg1: svOpenArrayHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn svGetArrElemPtr(
        arg1: svOpenArrayHandle,
        indx1: ::std::os::raw::c_int,
        ...
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn svGetArrElemPtr1(
        arg1: svOpenArrayHandle,
        indx1: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn svGetArrElemPtr2(
        arg1: svOpenArrayHandle,
        indx1: ::std::os::raw::c_int,
        indx2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn svGetArrElemPtr3(
        arg1: svOpenArrayHandle,
        indx1: ::std::os::raw::c_int,
        indx2: ::std::os::raw::c_int,
        indx3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn svPutBitArrElemVecVal(
        d: svOpenArrayHandle,
        s: *const svBitVecVal,
        indx1: ::std::os::raw::c_int,
        ...
    );
}
extern "C" {
    pub fn svPutBitArrElem1VecVal(
        d: svOpenArrayHandle,
        s: *const svBitVecVal,
        indx1: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn svPutBitArrElem2VecVal(
        d: svOpenArrayHandle,
        s: *const svBitVecVal,
        indx1: ::std::os::raw::c_int,
        indx2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn svPutBitArrElem3VecVal(
        d: svOpenArrayHandle,
        s: *const svBitVecVal,
        indx1: ::std::os::raw::c_int,
        indx2: ::std::os::raw::c_int,
        indx3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn svPutLogicArrElemVecVal(
        d: svOpenArrayHandle,
        s: *const svLogicVecVal,
        indx1: ::std::os::raw::c_int,
        ...
    );
}
extern "C" {
    pub fn svPutLogicArrElem1VecVal(
        d: svOpenArrayHandle,
        s: *const svLogicVecVal,
        indx1: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn svPutLogicArrElem2VecVal(
        d: svOpenArrayHandle,
        s: *const svLogicVecVal,
        indx1: ::std::os::raw::c_int,
        indx2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn svPutLogicArrElem3VecVal(
        d: svOpenArrayHandle,
        s: *const svLogicVecVal,
        indx1: ::std::os::raw::c_int,
        indx2: ::std::os::raw::c_int,
        indx3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn svGetBitArrElemVecVal(
        d: *mut svBitVecVal,
        s: svOpenArrayHandle,
        indx1: ::std::os::raw::c_int,
        ...
    );
}
extern "C" {
    pub fn svGetBitArrElem1VecVal(
        d: *mut svBitVecVal,
        s: svOpenArrayHandle,
        indx1: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn svGetBitArrElem2VecVal(
        d: *mut svBitVecVal,
        s: svOpenArrayHandle,
        indx1: ::std::os::raw::c_int,
        indx2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn svGetBitArrElem3VecVal(
        d: *mut svBitVecVal,
        s: svOpenArrayHandle,
        indx1: ::std::os::raw::c_int,
        indx2: ::std::os::raw::c_int,
        indx3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn svGetLogicArrElemVecVal(
        d: *mut svLogicVecVal,
        s: svOpenArrayHandle,
        indx1: ::std::os::raw::c_int,
        ...
    );
}
extern "C" {
    pub fn svGetLogicArrElem1VecVal(
        d: *mut svLogicVecVal,
        s: svOpenArrayHandle,
        indx1: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn svGetLogicArrElem2VecVal(
        d: *mut svLogicVecVal,
        s: svOpenArrayHandle,
        indx1: ::std::os::raw::c_int,
        indx2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn svGetLogicArrElem3VecVal(
        d: *mut svLogicVecVal,
        s: svOpenArrayHandle,
        indx1: ::std::os::raw::c_int,
        indx2: ::std::os::raw::c_int,
        indx3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn svGetBitArrElem(s: svOpenArrayHandle, indx1: ::std::os::raw::c_int, ...) -> svBit;
}
extern "C" {
    pub fn svGetBitArrElem1(s: svOpenArrayHandle, indx1: ::std::os::raw::c_int) -> svBit;
}
extern "C" {
    pub fn svGetBitArrElem2(
        s: svOpenArrayHandle,
        indx1: ::std::os::raw::c_int,
        indx2: ::std::os::raw::c_int,
    ) -> svBit;
}
extern "C" {
    pub fn svGetBitArrElem3(
        s: svOpenArrayHandle,
        indx1: ::std::os::raw::c_int,
        indx2: ::std::os::raw::c_int,
        indx3: ::std::os::raw::c_int,
    ) -> svBit;
}
extern "C" {
    pub fn svGetLogicArrElem(s: svOpenArrayHandle, indx1: ::std::os::raw::c_int, ...) -> svLogic;
}
extern "C" {
    pub fn svGetLogicArrElem1(s: svOpenArrayHandle, indx1: ::std::os::raw::c_int) -> svLogic;
}
extern "C" {
    pub fn svGetLogicArrElem2(
        s: svOpenArrayHandle,
        indx1: ::std::os::raw::c_int,
        indx2: ::std::os::raw::c_int,
    ) -> svLogic;
}
extern "C" {
    pub fn svGetLogicArrElem3(
        s: svOpenArrayHandle,
        indx1: ::std::os::raw::c_int,
        indx2: ::std::os::raw::c_int,
        indx3: ::std::os::raw::c_int,
    ) -> svLogic;
}
extern "C" {
    pub fn svPutLogicArrElem(
        d: svOpenArrayHandle,
        value: svLogic,
        indx1: ::std::os::raw::c_int,
        ...
    );
}
extern "C" {
    pub fn svPutLogicArrElem1(d: svOpenArrayHandle, value: svLogic, indx1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn svPutLogicArrElem2(
        d: svOpenArrayHandle,
        value: svLogic,
        indx1: ::std::os::raw::c_int,
        indx2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn svPutLogicArrElem3(
        d: svOpenArrayHandle,
        value: svLogic,
        indx1: ::std::os::raw::c_int,
        indx2: ::std::os::raw::c_int,
        indx3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn svPutBitArrElem(d: svOpenArrayHandle, value: svBit, indx1: ::std::os::raw::c_int, ...);
}
extern "C" {
    pub fn svPutBitArrElem1(d: svOpenArrayHandle, value: svBit, indx1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn svPutBitArrElem2(
        d: svOpenArrayHandle,
        value: svBit,
        indx1: ::std::os::raw::c_int,
        indx2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn svPutBitArrElem3(
        d: svOpenArrayHandle,
        value: svBit,
        indx1: ::std::os::raw::c_int,
        indx2: ::std::os::raw::c_int,
        indx3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn svGetScope() -> svScope;
}
extern "C" {
    pub fn svSetScope(scope: svScope) -> svScope;
}
extern "C" {
    pub fn svGetNameFromScope(arg1: svScope) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn svGetScopeFromName(scopeName: *const ::std::os::raw::c_char) -> svScope;
}
extern "C" {
    pub fn svPutUserData(
        scope: svScope,
        userKey: *mut ::std::os::raw::c_void,
        userData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn svGetUserData(
        scope: svScope,
        userKey: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn svGetCallerInfo(
        fileName: *mut *const ::std::os::raw::c_char,
        lineNumber: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn svIsDisabledState() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn svAckDisabledState();
}
#[cfg(feature = "sv2023")]
extern "C" {
    pub fn svGetTime(scope: svScope, time: *mut svTimeVal) -> ::std::os::raw::c_int;
}
#[cfg(feature = "sv2023")]
extern "C" {
    pub fn svGetTimeUnit(scope: svScope, time_unit: *mut i32) -> ::std::os::raw::c_int;
}
#[cfg(feature = "sv2023")]
extern "C" {
    pub fn svGetTimePrecision(scope: svScope, time_precision: *mut i32) -> ::std::os::raw::c_int;
}
pub type svBitVec32 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct svLogicVec32 {
    pub c: ::std::os::raw::c_uint,
    pub d: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_svLogicVec32() {
    const UNINIT: ::std::mem::MaybeUninit<svLogicVec32> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<svLogicVec32>(),
        8usize,
        concat!("Size of: ", stringify!(svLogicVec32))
    );
    assert_eq!(
        ::std::mem::align_of::<svLogicVec32>(),
        4usize,
        concat!("Alignment of ", stringify!(svLogicVec32))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(svLogicVec32),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(svLogicVec32),
            "::",
            stringify!(d)
        )
    );
}
pub type svBitPackedArrRef = *mut ::std::os::raw::c_void;
pub type svLogicPackedArrRef = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn svSizeOfBitPackedArr(width: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn svSizeOfLogicPackedArr(width: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn svPutBitVec32(d: svBitPackedArrRef, s: *const svBitVec32, w: ::std::os::raw::c_int);
}
extern "C" {
    pub fn svPutLogicVec32(
        d: svLogicPackedArrRef,
        s: *const svLogicVec32,
        w: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn svGetBitVec32(d: *mut svBitVec32, s: svBitPackedArrRef, w: ::std::os::raw::c_int);
}
extern "C" {
    pub fn svGetLogicVec32(d: *mut svLogicVec32, s: svLogicPackedArrRef, w: ::std::os::raw::c_int);
}
extern "C" {
    pub fn svGetSelectBit(s: svBitPackedArrRef, i: ::std::os::raw::c_int) -> svBit;
}
extern "C" {
    pub fn svGetSelectLogic(s: svLogicPackedArrRef, i: ::std::os::raw::c_int) -> svLogic;
}
extern "C" {
    pub fn svPutSelectBit(d: svBitPackedArrRef, i: ::std::os::raw::c_int, s: svBit);
}
extern "C" {
    pub fn svPutSelectLogic(d: svLogicPackedArrRef, i: ::std::os::raw::c_int, s: svLogic);
}
extern "C" {
    pub fn svGetPartSelectBit(
        d: *mut svBitVec32,
        s: svBitPackedArrRef,
        i: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn svGetBits(
        s: svBitPackedArrRef,
        i: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
    ) -> svBitVec32;
}
extern "C" {
    pub fn svGet32Bits(s: svBitPackedArrRef, i: ::std::os::raw::c_int) -> svBitVec32;
}
extern "C" {
    pub fn svGet64Bits(s: svBitPackedArrRef, i: ::std::os::raw::c_int) -> u64;
}
extern "C" {
    pub fn svGetPartSelectLogic(
        d: *mut svLogicVec32,
        s: svLogicPackedArrRef,
        i: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn svPutPartSelectBit(
        d: svBitPackedArrRef,
        s: svBitVec32,
        i: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn svPutPartSelectLogic(
        d: svLogicPackedArrRef,
        s: *const svLogicVec32,
        i: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn svPutBitArrElemVec32(
        d: svOpenArrayHandle,
        s: *const svBitVec32,
        indx1: ::std::os::raw::c_int,
        ...
    );
}
extern "C" {
    pub fn svPutBitArrElem1Vec32(
        d: svOpenArrayHandle,
        s: *const svBitVec32,
        indx1: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn svPutBitArrElem2Vec32(
        d: svOpenArrayHandle,
        s: *const svBitVec32,
        indx1: ::std::os::raw::c_int,
        indx2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn svPutBitArrElem3Vec32(
        d: svOpenArrayHandle,
        s: *const svBitVec32,
        indx1: ::std::os::raw::c_int,
        indx2: ::std::os::raw::c_int,
        indx3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn svPutLogicArrElemVec32(
        d: svOpenArrayHandle,
        s: *const svLogicVec32,
        indx1: ::std::os::raw::c_int,
        ...
    );
}
extern "C" {
    pub fn svPutLogicArrElem1Vec32(
        d: svOpenArrayHandle,
        s: *const svLogicVec32,
        indx1: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn svPutLogicArrElem2Vec32(
        d: svOpenArrayHandle,
        s: *const svLogicVec32,
        indx1: ::std::os::raw::c_int,
        indx2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn svPutLogicArrElem3Vec32(
        d: svOpenArrayHandle,
        s: *const svLogicVec32,
        indx1: ::std::os::raw::c_int,
        indx2: ::std::os::raw::c_int,
        indx3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn svGetBitArrElemVec32(
        d: *mut svBitVec32,
        s: svOpenArrayHandle,
        indx1: ::std::os::raw::c_int,
        ...
    );
}
extern "C" {
    pub fn svGetBitArrElem1Vec32(
        d: *mut svBitVec32,
        s: svOpenArrayHandle,
        indx1: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn svGetBitArrElem2Vec32(
        d: *mut svBitVec32,
        s: svOpenArrayHandle,
        indx1: ::std::os::raw::c_int,
        indx2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn svGetBitArrElem3Vec32(
        d: *mut svBitVec32,
        s: svOpenArrayHandle,
        indx1: ::std::os::raw::c_int,
        indx2: ::std::os::raw::c_int,
        indx3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn svGetLogicArrElemVec32(
        d: *mut svLogicVec32,
        s: svOpenArrayHandle,
        indx1: ::std::os::raw::c_int,
        ...
    );
}
extern "C" {
    pub fn svGetLogicArrElem1Vec32(
        d: *mut svLogicVec32,
        s: svOpenArrayHandle,
        indx1: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn svGetLogicArrElem2Vec32(
        d: *mut svLogicVec32,
        s: svOpenArrayHandle,
        indx1: ::std::os::raw::c_int,
        indx2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn svGetLogicArrElem3Vec32(
        d: *mut svLogicVec32,
        s: svOpenArrayHandle,
        indx1: ::std::os::raw::c_int,
        indx2: ::std::os::raw::c_int,
        indx3: ::std::os::raw::c_int,
    );
}
