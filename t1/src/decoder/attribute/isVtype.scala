// SPDX-License-Identifier: Apache-2.0
// SPDX-FileCopyrightText: 2022 Jiuyang Liu <liu@jiuyang.me>

package org.chipsalliance.t1.rtl.decoder.attribute

import org.chipsalliance.t1.rtl.decoder.T1DecodePattern

object isVtype {
  def apply(t1DecodePattern: T1DecodePattern): isVtype =
    Seq(
      y _ -> Y,
      n _ -> N,
      dc _ -> DC
    ).collectFirst {
      case (fn, tri) if fn(t1DecodePattern) => isVtype(tri)
    }.get

  def y(t1DecodePattern: T1DecodePattern): Boolean = {
    val allMatched = Seq(
      "vaadd.vv",
      "vaaddu.vv",
      "vadc.vvm",
      "vadd.vv",
      "vand.vv",
      "vasub.vv",
      "vasubu.vv",
      "vcompress.vm",
      "vcpop.m",
      "vdiv.vv",
      "vdivu.vv",
      "vfadd.vv",
      "vfclass.v",
      "vfcvt.f.x.v",
      "vfcvt.f.xu.v",
      "vfcvt.rtz.x.f.v",
      "vfcvt.rtz.xu.f.v",
      "vfcvt.x.f.v",
      "vfcvt.xu.f.v",
      "vfdiv.vv",
      "vfirst.m",
      "vfmacc.vv",
      "vfmadd.vv",
      "vfmax.vv",
      "vfmin.vv",
      "vfmsac.vv",
      "vfmsub.vv",
      "vfmul.vv",
      "vfmv.f.s",
      "vfncvt.f.f.w",
      "vfncvt.f.x.w",
      "vfncvt.f.xu.w",
      "vfncvt.rod.f.f.w",
      "vfncvt.rtz.x.f.w",
      "vfncvt.rtz.xu.f.w",
      "vfncvt.x.f.w",
      "vfncvt.xu.f.w",
      "vfnmacc.vv",
      "vfnmadd.vv",
      "vfnmsac.vv",
      "vfnmsub.vv",
      "vfrec7.v",
      "vfredmax.vs",
      "vfredmin.vs",
      "vfredosum.vs",
      "vfredusum.vs",
      "vfrsqrt7.v",
      "vfsgnj.vv",
      "vfsgnjn.vv",
      "vfsgnjx.vv",
      "vfsqrt.v",
      "vfsub.vv",
      "vfwadd.vv",
      "vfwadd.wv",
      "vfwcvt.f.f.v",
      "vfwcvt.f.x.v",
      "vfwcvt.f.xu.v",
      "vfwcvt.rtz.x.f.v",
      "vfwcvt.rtz.xu.f.v",
      "vfwcvt.x.f.v",
      "vfwcvt.xu.f.v",
      "vfwmacc.vv",
      "vfwmsac.vv",
      "vfwmul.vv",
      "vfwnmacc.vv",
      "vfwnmsac.vv",
      "vfwredosum.vs",
      "vfwredusum.vs",
      "vfwsub.vv",
      "vfwsub.wv",
      "vid.v",
      "viota.m",
      "vmacc.vv",
      "vmadc.vv",
      "vmadc.vvm",
      "vmadd.vv",
      "vmand.mm",
      "vmandn.mm",
      "vmax.vv",
      "vmaxu.vv",
      "vmerge.vvm",
      "vmv.v.v",
      "vmfeq.vv",
      "vmfle.vv",
      "vmflt.vv",
      "vmfne.vv",
      "vmin.vv",
      "vminu.vv",
      "vmnand.mm",
      "vmnor.mm",
      "vmor.mm",
      "vmorn.mm",
      "vmsbc.vv",
      "vmsbc.vvm",
      "vmsbf.m",
      "vmseq.vv",
      "vmsif.m",
      "vmsle.vv",
      "vmsleu.vv",
      "vmslt.vv",
      "vmsltu.vv",
      "vmsne.vv",
      "vmsof.m",
      "vmul.vv",
      "vmulh.vv",
      "vmulhsu.vv",
      "vmulhu.vv",
      "vmv.x.s",
      "vmxnor.mm",
      "vmxor.mm",
      "vnclip.wv",
      "vnclipu.wv",
      "vnmsac.vv",
      "vnmsub.vv",
      "vnsra.wv",
      "vnsrl.wv",
      "vor.vv",
      "vredand.vs",
      "vredmax.vs",
      "vredmaxu.vs",
      "vredmin.vs",
      "vredminu.vs",
      "vredor.vs",
      "vredsum.vs",
      "vredxor.vs",
      "vrem.vv",
      "vremu.vv",
      "vrgather.vv",
      "vrgatherei16.vv",
      "vsadd.vv",
      "vsaddu.vv",
      "vsbc.vvm",
      "vsext.vf2",
      "vsext.vf4",
      "vsext.vf8",
      "vsll.vv",
      "vsmul.vv",
      "vsra.vv",
      "vsrl.vv",
      "vssra.vv",
      "vssrl.vv",
      "vssub.vv",
      "vssubu.vv",
      "vsub.vv",
      "vwadd.vv",
      "vwadd.wv",
      "vwaddu.vv",
      "vwaddu.wv",
      "vwmacc.vv",
      "vwmaccsu.vv",
      "vwmaccu.vv",
      "vwmul.vv",
      "vwmulsu.vv",
      "vwmulu.vv",
      "vwredsum.vs",
      "vwredsumu.vs",
      "vwsub.vv",
      "vwsub.wv",
      "vwsubu.vv",
      "vwsubu.wv",
      "vxor.vv",
      "vzext.vf2",
      "vzext.vf4",
      "vzext.vf8",
      // rv_zvbb
      "vandn.vv",
      "vrol.vv",
      "vror.vv",
      "vwsll.vv",
    )
    allMatched.contains(t1DecodePattern.instruction.name)
  }
  def n(t1DecodePattern: T1DecodePattern): Boolean = {
    val allMatched = t1DecodePattern.param.allInstructions.filter(i =>
      !(y(t1DecodePattern) || dc(t1DecodePattern))
    )
    allMatched.contains(t1DecodePattern.instruction)
  }

  def dc(t1DecodePattern: T1DecodePattern): Boolean = false
}

case class isVtype(value: TriState) extends BooleanDecodeAttribute {
  override val description: String = "src1 is vtype."
}
